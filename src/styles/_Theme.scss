// The global theme is defined by the developer in this file only.
// "MuiTheme" in index will automatically match with these variables with the 
// exception of some properties and component overrides from Material UI themes.
// (note that Typography's textTransform property is not being overridden and should be fixed)
// Review all of Material UI's default theme variables and 
// index.tsx to see what needs to be specified exclusively in MuiTheme.
//
// To use the theme in component styling, import _Utils.scss 
// (a parent global styling sheet that imports this theme)
// in its respective style sheet (.scss) and then call one of the available:
//
// Functions: 
//      breakpoints($size)
//      palette($type, $value)
//      shadows($depth)
//      shape($attribute)
//
// Mixins:
//      typography($variant)
//
//
// Example Usage:
//
//  @import '../path/to/_Utils.scss'
//
//  .section {
//      maxWidth: breakpoints(md);
//      background-color: palette(primary, main);
//      box-shadow: shadows(2);
//      border-radius: shape(borderRadius);
//  }

//  .title {
//      @include typography(h2)
//  }

@import './Fonts.scss';
$header-height: 45px;
$primary-color: #6868D5; // primary-button
$secondary-color: #767676;
$error-color: #D65F5F;
$warning-color: #F8E164;
$info-color: #99CCFF;
$success-color: #A1E0B3;
$primary-text-color: #212121; 
$secondary-text-color: #616161;

$theme: (
    breakpoints: (
        xs: 0px,
        sm: 600px,
        md: 960px,
        lg: 1280px,
        xl: 1920px,
    ),
    palette: (
        primary: (
            light: #d5dbf0,
            main: $primary-color,
            dark: darken($primary-color, 12%),
            contrastText: #fff,
        ),
        secondary: (
            light: #c0edea,
            main: $secondary-color,
            dark: darken($secondary-color, 12%),
            contrastText: #fff,
        ),
        error: (
            light: lighten($error-color, 12%),
            main: $error-color,
            dark: darken($error-color, 12%),
            contrastText:#fff,
        ),
        warning: (
            light: lighten($warning-color, 12%),
            main: $warning-color,
            dark: darken($warning-color, 12%),
            contrastText:rgba(0, 0, 0, 0.87),
        ),
        info: (
            light: lighten($info-color, 12%),
            main: $info-color,
            dark: darken($info-color, 12%),
            contrastText:#fff,
        ),
        success: (
            light: lighten($success-color, 12%),
            main: $success-color,
            dark: darken($success-color, 12%),
            contrastText:rgba(0, 0, 0, 0.87),
        ),
        text: (
            primary:darken($primary-text-color, 12%),
            secondary:rgba(0, 0, 0, 0.65),
            disabled:rgba(0, 0, 0, 0.38),
            hint: #767B8B,
        ),
        background: (
            default: #F0F0F0,
            paper: #fff,
        ),
        grey: (
            50: #fafafa,
            100: #f5f5f5,
            200: #eeeeee,
            300: #e0e0e0,
            350: #cdcdcd,
            400: #bdbdbd,
            500: #9e9e9e,
            600: #757575,
            700: #616161,
            800: #424242,
            900: #212121,
            A100: #d5d5d5,
            A200: #aaaaaa,
            A400: #303030,
            A700: #525252,
        ),
    ),
    shadows: (
        0: none,
        1: (2px 2px 5px 0px rgba(0,0,0,0.05)),
        2: (2px 2px 7px 0px rgba(0,0,0,0.075)),
        3: (2px 3px 7px 0px rgba(0,0,0,0.075), 0px 1px 10px 0px rgba(0,0,0,0.05)),
        4: (2px 4px 8px 0px rgba(0,0,0,0.075), 0px 1px 12px 0px rgba(0,0,0,0.075)),
        5: (2px 5px 8px 0px rgba(0,0,0,0.075), 0px 2px 14px 0px rgba(0,0,0,0.1)),
        6: (2px 6px 10px 0px rgba(0,0,0,0.1), 0px 2px 18px 0px rgba(0,0,0,0.1)),
        7: (2px 7px 10px 1px rgba(0,0,0,0.1), 0px 2px 16px 1px rgba(0,0,0,0.12)),
        8: (2px 8px 10px 1px rgba(0,0,0,0.1), 0px 3px 14px 2px rgba(0,0,0,0.12)),
        9: (2px 9px 12px 1px rgba(0,0,0,0.1), 0px 3px 16px 2px rgba(0,0,0,0.12)),
        10: (2px 10px 14px 1px rgba(0,0,0,0.12), 0px 4px 18px 3px rgba(0,0,0,0.12)),
        11: (2px 11px 15px 1px rgba(0,0,0,0.12), 0px 4px 20px 3px rgba(0,0,0,0.12)),
        12: (2px 12px 17px 2px rgba(0,0,0,0.12), 0px 5px 22px 4px rgba(0,0,0,0.12)),
        13: (2px 13px 19px 2px rgba(0,0,0,0.12), 0px 5px 24px 4px rgba(0,0,0,0.12)),
        14: (2px 14px 21px 2px rgba(0,0,0,0.12), 0px 5px 26px 4px rgba(0,0,0,0.12)),
        15: (2px 15px 22px 2px rgba(0,0,0,0.12), 0px 6px 28px 5px rgba(0,0,0,0.12)),
        16: (2px 16px 24px 2px rgba(0,0,0,0.12), 0px 6px 30px 5px rgba(0,0,0,0.12)),
        17: (2px 17px 26px 2px rgba(0,0,0,0.14), 0px 6px 32px 5px rgba(0,0,0,0.12)),
        18: (2px 18px 28px 2px rgba(0,0,0,0.14), 0px 7px 34px 6px rgba(0,0,0,0.12)),
        19: (2px 19px 29px 2px rgba(0,0,0,0.14), 0px 7px 36px 6px rgba(0,0,0,0.12)),
        20: (2px 20px 31px 3px rgba(0,0,0,0.14), 0px 8px 38px 7px rgba(0,0,0,0.12)),
        21: (2px 21px 33px 3px rgba(0,0,0,0.14), 0px 8px 40px 7px rgba(0,0,0,0.12)),
        22: (2px 22px 35px 3px rgba(0,0,0,0.14), 0px 8px 42px 7px rgba(0,0,0,0.12)),
        23: (2px 23px 36px 3px rgba(0,0,0,0.14), 0px 9px 44px 8px rgba(0,0,0,0.12)),
        24: (2px 24px 38px 3px rgba(0,0,0,0.14), 0px 9px 46px 8px rgba(0,0,0,0.12)),
    ),
    typography: (
        font-family: ("Montserrat", sans-serif),
        h1: (
            fontFamily: 'Montserrat',
            fontWeight: 400,
            fontSize: 3rem,
        ),
        h2: (
            fontFamily: 'Montserrat',
            fontWeight: 400,
            fontSize: 2.25rem,
            //ineHeight: 1.2,
            //letterSpacing: -0.00833em,
        ),
        h3: (
            fontFamily: 'Montserrat',
            fontWeight: 500,
            fontSize: 2rem,
        ),
        h4: (
            fontFamily: 'Montserrat',
            fontWeight: 600,
            fontSize: 1.75rem,
        ),
        h5: (
            fontFamily: 'Montserrat',
            fontWeight: 600,
            fontSize: 1.5rem,
        ),
        h6: (
            fontFamily: 'Montserrat',
            fontWeight: 700,
            fontSize: 1.2rem,
        ),
        subtitle1: (
            fontFamily: 'Montserrat',
            fontWeight: 200,
            fontSize: 1.1rem,
        ),
        subtitle2: (
            fontFamily: 'Montserrat',
            fontWeight: 200,
            fontSize: 1rem,
        ),
        body1: (
            fontFamily: 'Montserrat',
            fontWeight: 400,
            fontSize: 0.95rem,
        ),
        body2: (
            fontFamily: 'Montserrat',
            fontWeight: 400,
            fontSize: 0.88rem,
        ),
        button: (
            fontFamily: 'Montserrat',
            fontWeight: 600,
            fontSize: 0.95rem,
        ),
        caption: (
            fontFamily: 'Montserrat',
            fontWeight: 400,
            fontSize: 0.8rem,
        ),
        overline: (
            fontFamily: 'Montserrat',
            fontWeight: 400,
            fontSize: 0.75rem,
        )
    ),
    shape: (
        borderRadius: 3px,
    ),
    button: (
        borderRadius: 15px,
    ),
);
// Functions and Mixins used by individual SASS files to access theme variables
@function breakpoints($size) {
    $breakpoints: map-get($theme, breakpoints);
    @if map-has-key($breakpoints, $size){
        @return map-get($breakpoints, $size);
    }
    @warn "`#{$size}` does not match the available breakpoint values (xs, sm, md, lg, xl)";
    @return null;
}
@function palette($type, $value) {
    $palette: map-get($theme, palette);
    @if map-has-key($palette, $type){
        $type: map-get($palette, $type);
            @if map-has-key($type, $value){
                @return map-get($type, $value);
            }
            @warn "`#{$value}` does not exist in palette type";
            @return null;        
    }
    @warn "`#{$color}` does not exist in palette";
    @return null;
}
@function shadows($depth) {
    $shadows: map-get($theme, shadows);
    @if map-has-key($shadows, $depth){
        @return map-get($shadows, $depth);
    }
    @warn "`#{$depth}` does not match the available shadow levels (0-24)";
    @return null;
}
@mixin typography($variant) {
    $typography: map-get($theme, typography);
    @if map-has-key($typography, $variant){
        font-family: map-get(map-get($typography, $variant), fontFamily) !important;
        font-weight: map-get(map-get($typography, $variant), fontWeight) !important;
        font-size: map-get(map-get($typography, $variant), fontSize) !important;
        line-height: map-get(map-get($typography, $variant), lineHeight) !important;
        letter-spacing: map-get(map-get($typography, $variant), letterSpacing) !important;
    } @else {
        @warn "`#{$variant}` does not match the available typography variants";
    }
}

@mixin shape() {
    // Removed warnings because there's no attributes being retrieved
    $shape: map-get($theme, shape);
    border-radius: map-get($shape, borderRadius) !important;
}

@mixin button() {
    // Removed warnings because there's no attributes being retrieved
    $button: map-get($theme, button);
    border-radius: map-get($button, borderRadius) !important;
}
